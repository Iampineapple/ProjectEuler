#!/usr/bin/env python

#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#Let us list the factors of the first seven triangle numbers:
#
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
#
#We can see that 28 is the first triangle number to have over five divisors.
#
#What is the value of the first triangle number to have over five hundred divisors?
#
#This program was written by Cory Haight-Nali on or around 06 August 2015

#Formula for summing up all the numbers.
def triangleNumber(n):
    return n * (n + 1) / 2

#Function that returns the number of divisors of an integer n
#For each number up to sqrt(n), it checks if that number evenly divides n
#If it does, add 2 to the divisor count, as we've found one factor, and there's
#a correlating factor greater than sqrt(n)
def divisors(n):
    if(n == 1):
        return 1
    divisors = 0
    for i in range(1, int(round(n**0.5)), 1):
        if(n % i == 0):
            divisors += 2
    return divisors

#We know that the first 6 triangle numbers don't have 500 divisors,
#so try all the triangle numbers for 7 and greater
num = 7
while(divisors(triangleNumber(num)) < 500):
    num +=1
print "The first triangle number with over 500 divisors is ", triangleNumber(num)
raw_input("Press any key to exit")

